//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using SE.GOV.MM.Integration.Core.Model;

namespace Authority
{
    
 
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface AuthorityPortChannel : AuthorityPort, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class AuthorityPortClient : System.ServiceModel.ClientBase<AuthorityPort>, AuthorityPort
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AuthorityPortClient() : 
                base(AuthorityPortClient.GetDefaultBinding(), AuthorityPortClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.AuthorityPort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthorityPortClient(EndpointConfiguration endpointConfiguration) : 
                base(AuthorityPortClient.GetBindingForEndpoint(endpointConfiguration), AuthorityPortClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthorityPortClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AuthorityPortClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthorityPortClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AuthorityPortClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AuthorityPortClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<getDispatchersResponse> AuthorityPort.getDispatchersAsync(getDispatchersRequest request)
        {
            return base.Channel.getDispatchersAsync(request);
        }
        
        public System.Threading.Tasks.Task<getDispatchersResponse> getDispatchersAsync()
        {
            getDispatchersRequest inValue = new getDispatchersRequest();
            return ((AuthorityPort)(this)).getDispatchersAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<getUserAccessRightsResponse> AuthorityPort.getUserAccessRightsAsync(getUserAccessRightsRequest request)
        {
            return base.Channel.getUserAccessRightsAsync(request);
        }
        
        public System.Threading.Tasks.Task<getUserAccessRightsResponse> getUserAccessRightsAsync(string arg0)
        {
            getUserAccessRightsRequest inValue = new getUserAccessRightsRequest();
            inValue.arg0 = arg0;
            return ((AuthorityPort)(this)).getUserAccessRightsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<getUserAccessRightsNoConcentResponse> AuthorityPort.getUserAccessRightsNoConcentAsync(getUserAccessRightsNoConcentRequest request)
        {
            return base.Channel.getUserAccessRightsNoConcentAsync(request);
        }
        
        public System.Threading.Tasks.Task<getUserAccessRightsNoConcentResponse> getUserAccessRightsNoConcentAsync(string arg0)
        {
            getUserAccessRightsNoConcentRequest inValue = new getUserAccessRightsNoConcentRequest();
            inValue.arg0 = arg0;
            return ((AuthorityPort)(this)).getUserAccessRightsNoConcentAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<isSenderAcceptedResponse> AuthorityPort.isSenderAcceptedAsync(isSenderAcceptedRequest request)
        {
            return base.Channel.isSenderAcceptedAsync(request);
        }
        
        public System.Threading.Tasks.Task<isSenderAcceptedResponse> isSenderAcceptedAsync(string arg0)
        {
            isSenderAcceptedRequest inValue = new isSenderAcceptedRequest();
            inValue.arg0 = arg0;
            return ((AuthorityPort)(this)).isSenderAcceptedAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<getSendersResponse> AuthorityPort.getSendersAsync(getSendersRequest request)
        {
            return base.Channel.getSendersAsync(request);
        }
        
        public System.Threading.Tasks.Task<getSendersResponse> getSendersAsync()
        {
            getSendersRequest inValue = new getSendersRequest();
            return ((AuthorityPort)(this)).getSendersAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<testNewSignerResponse> AuthorityPort.testNewSignerAsync(testNewSignerRequest request)
        {
            return base.Channel.testNewSignerAsync(request);
        }
        
        public System.Threading.Tasks.Task<testNewSignerResponse> testNewSignerAsync(string arg0, Person[] arg1, string arg2, AccountActions arg3)
        {
            testNewSignerRequest inValue = new testNewSignerRequest();
            inValue.arg0 = arg0;
            inValue.arg1 = arg1;
            inValue.arg2 = arg2;
            inValue.arg3 = arg3;
            return ((AuthorityPort)(this)).testNewSignerAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<verifyAuthorizedSignaturesResponse> AuthorityPort.verifyAuthorizedSignaturesAsync(verifyAuthorizedSignaturesRequest request)
        {
            return base.Channel.verifyAuthorizedSignaturesAsync(request);
        }
        
        public System.Threading.Tasks.Task<verifyAuthorizedSignaturesResponse> verifyAuthorizedSignaturesAsync(string arg0, SignatureData[] arg1, byte[] arg2, AccountActions arg3)
        {
            verifyAuthorizedSignaturesRequest inValue = new verifyAuthorizedSignaturesRequest();
            inValue.arg0 = arg0;
            inValue.arg1 = arg1;
            inValue.arg2 = arg2;
            inValue.arg3 = arg3;
            return ((AuthorityPort)(this)).verifyAuthorizedSignaturesAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.AuthorityPort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.AuthorityPort))
            {
                return new System.ServiceModel.EndpointAddress("http://minameddelanden.gov.se/Authority");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return AuthorityPortClient.GetBindingForEndpoint(EndpointConfiguration.AuthorityPort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return AuthorityPortClient.GetEndpointAddress(EndpointConfiguration.AuthorityPort);
        }
        
        public enum EndpointConfiguration
        {
            
            AuthorityPort,
        }
    }
}
